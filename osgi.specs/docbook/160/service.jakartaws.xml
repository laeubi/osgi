<?xml version="1.0" encoding="utf-8"?>
<!--
    Copyright (c) Contributors to the Eclipse Foundation
   
    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at
   
        http://www.apache.org/licenses/LICENSE-2.0
   
    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
   
    SPDX-License-Identifier: Apache-2.0 
 -->
<chapter label="160" revision="$Id$" version="5.0"
         xml:id="service.jakartaws" xmlns="http://docbook.org/ns/docbook"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:ns5="http://www.w3.org/2000/svg"
         xmlns:ns4="http://www.w3.org/1998/Math/MathML"
         xmlns:ns3="http://www.w3.org/1999/xhtml"
         xmlns:ns="http://docbook.org/ns/docbook">
  <title>Whiteboard Specification for Jakarta™ XML Web Services</title>

  <titleabbrev>Jakarta™ XML Web Services Whiteboard</titleabbrev>

  <info>
    <releaseinfo>
      <xref endterm="org.osgi.service.jakartaws.whiteboard-version"
            linkend="org.osgi.service.jakarta.xml.ws.whiteboard"/>
    </releaseinfo>
  </info>

  <section>
    <title>Introduction</title>

    <para>
     Webservices are an important part in todays maschine-to-maschine communication and the <xref linkend="service.jakartaws-i21217577"/> (formerly known as JAX-WS) specification offers a vendor neutral way of writing and using such services.
     
    Managing endpoints in a dynamic way with integration to different transports can be a challenging task, this specification aims to make this task much more easier using the famous <xref linkend="service.jakartaws-whiteboard.pattern.ref" />
    and allow integration with existing transport specifications.
    
    
    The <xref linkend="service.jakartaws-i21217577"/> (formerly known as JAX-WS) defines a
    standard Java- to-WSDL mapping which determines how web service operations
    are bound to Java methods when a SOAP message invokes an action.
    Webservices are an important part in todays maschine-to-maschine communication and the [Jakarta™ XML Web Services](https://jakarta.ee/specifications/xml-web-services/4.0/jakarta-xml-ws-spec-4.0.html) specification offers a vendor neutral way of writing and using such services.
Managing endpoints in a dynamic way with integration to different transports can be a challenging task, this specification aims to make this task much more easier using the famous [Whiteboard Pattern](https://enroute.osgi.org/FAQ/400-patterns.html#whiteboard-pattern)
and allow integration with existing transport specifications.</para>

    <para>The Whiteboard Specification for Jakarta™ XML Web Services supports:</para>

    <itemizedlist>
      <listitem>
        <para><emphasis>Registering Web Service Implementation</emphasis> - an implementation is an annotated "implementor" of the webservice used by an ednpoint.</para>
      </listitem>

      <listitem>
        <para><emphasis>Publishing Endpoints</emphasis> - an "implementor" is published by an endpoint that handles the incomming and outgoing messages on the transport level</para>
      </listitem>

      <listitem>
        <para><emphasis>Registering Handlers</emphasis> - a handler can intercept messages when they pass from / to endpoint and perform actions on it.</para>
      </listitem>

    </itemizedlist>

    <para>Whiteboard Specification for Jakarta™ XML Web Services implementations must support
    at least version 4.0 of the Jakarta™ XML Web Services API and registering endpoints to the protocols provided by the used API implementation.</para>

    <section>
      <title>Entities</title>

      <para>This specification defines the following entities:</para>
      
      <itemizedlist>
        <listitem>
          <para><emphasis>[Handler](https://jakarta.ee/specifications/xml-web-services/4.0/apidocs/jakarta.xml.ws/jakarta/xml/ws/handler/handler)</emphasis> - An object registered in the Service Registry
          providing responsible for filtering or inspection of messages while they flow through the webservice processing.</para>
        </listitem>

        <listitem>
          <para><emphasis>Endpoint Implementor</emphasis> - An implementation that  can be used to register an endpoint with and enpoint</para>
        </listitem>

        <listitem>
          <para><emphasis>Endpoint Publisher</emphasis> - An implementation that collects <emphasis>Handler</emphasis> and <emphasis>Endpoint Implementor</emphasis> instances and publish them for a given transport</para>
        </listitem>

      </itemizedlist>
      
      <figure pgwide="1" xml:id="service.jakartaws.whiteboard-overview">
        <title>Jakarta™ XML Web Services Overview Diagram</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center" contentdepth="3.313in"
                       contentwidth="5.496in" fileref="overall.svg"/>
          </imageobject>
        </mediaobject>
      </figure>
   </section>

   <section xml:id="service.jakartaws.whiteboard">
    <title>Jakarta™ XML Web Services Whiteboard</title>

    <para>While in a traditional web application the configuration is rather static and known in advance in OSGi items can come and go anytime and code should be aware of this dynamism.
        Also registration of listeners must happen before an endpoint is published and only weak typing makes it hard to handle this right manually.
        As a result, the publishing of Web Services in the current state of the specification goes against the loose coupling concept usually provided by OSGi 
        as it requires knowledge about the stakeholders involved
        </para>
        <para>
         It is therefore the responsibility of the Web Services Whiteboard to handle this cases in a transparent manner so the user can focus on the actual work, 
         use common dependency injection techniques like Declarative Services to inject dependencies.
         </para>
   </section>
   
   <section xml:id="service.jakartars.endpoint.services">
    <title>Registering Endpoint Implementor</title>

    <para>Endpoint Implementor can be registered with the Jakarta™ XML Web Services Whiteboard by registering them as Whiteboard
    services. This means that the endpoint POJO implementations are registered in the Service Registry. As Webservice Endpoints are
    POJOs they may be registered using <emphasis>any</emphasis> valid service interface, including <code>Object</code>. and use any
    annotations on endpoint object, just as it would outside of OSGi.</para>

    <para>To be picked up as endpoints, the POJO they are instead registered with the
    <code>osgi.soap.endpoint.implementor</code> service property with a value of
    <code>"true"</code>. This property serves as a marker to the Jakarta™ XML Web Services Whiteboard
    runtime, indicating that this OSGi service should further be processed as an endpoint.</para>

      <para>The code below shows an simple echo webservice Endpoint Implementor, the `@WebService` / `@WebMethod` is 
      a jakarta annotation and therefore not processed by the akarta™ XML Web Services Whiteboard
      runtime:</para>

      <programlisting>@WebService
@SOAPWhiteboardEndpoint(contextpath = "/echo")
@Component(immediate = true, service = WSEcho.class)
public class WSEcho {

	@WebMethod(operationName = "echo", action = "echo")
	public String echo(@WebParam(name = "textIn") String text) {
		return text;
	}

}</programlisting>
   </section>
   <section xml:id="service.jakartaws.handler.services">
    <title>Registering Webservice Handlers</title>

    <para>Webservice Handlers can be registered with the Jakarta™ XML Web Services Whiteboard by registering them as Whiteboard
    services. This means that the handler POJO implementations are registered
    in the Service Registry. As Handler Services must be registered using <emphasis>jakarta.xml.ws.handler.Handler</emphasis> 
    as the service interface but implement any of the valid types of the Jakarta™ XML Web Services specification.
    </para>

    <para>The code below shows an example of a logging handler that wants to intercept incoming and outgoing messages,
    this handler is targeted to any registered <emphasis>Endpoint Implementor</emphasis>:</para>

      <programlisting>@Component(service = Handler.class)
public class SOAPLoggingHandler implements SOAPHandler&lt;SOAPMessageContext&gt; {

     public Set&lt;QName&gt; getHeaders() {
        return null;
    }

    public boolean handleMessage(SOAPMessageContext smc) {
        try {
            smc.getMessage().writeTo(System.out);
        } catch (SOAPException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
        return true;
    }

    public boolean handleFault(SOAPMessageContext smc) {
        try {
            smc.getMessage().writeTo(System.err);
        } catch (SOAPException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
        return true;
    }

    public void close(MessageContext messageContext) {
    }
}
        </programlisting>
    <section xml:id="service.jakartaws.handler.services.target">
     	<title>Targeting specific Endpoint Implementor</title>
     	<para>
     	If a handler wants to target a specific <emphasis>Endpoint Implementor</emphasis> it can specify the <emphasis>osgi.soap.endpoint.selector</emphasis> service properties
     	and will only be installed for such <emphasis>Endpoint Implementor</emphasis> that map the provided filter.
     	</para>
     	    <para>The previous example targeting an <emphasis>Endpoint Implementor</emphasis> registered with a <emphasis>wstype</emphasis> property of <emphasis>echo</emphasis> looks like this:</para>

      <programlisting>@Component(service = Handler.class)
        @EndpointSelector("(wstype=echo)")
        public class SOAPLoggingHandler implements SOAPHandler&lt;SOAPMessageContext&gt; {

             ... like before ...
        }
        </programlisting>
     </section>
    </section>

  <section>
    <title>References</title>

    <bibliolist>
      <bibliomixed xml:id="service.jakartaws-i21217577">
        <title>Jakarta™ XML Web Services Specification</title>

        <biblioid class="uri">
          <link xlink:href="https://jakarta.ee/specifications/xml-web-services/4.0/jakarta-xml-ws-spec-4.0.html"/>
        </biblioid>
      </bibliomixed>

      <bibliomixed xml:id="service.jakartaws-portable.java.contracts.ref">
        <title>Portable Java Contract Definitions</title>

        <biblioid class="uri">
          <link xlink:href="https://docs.osgi.org/reference/portable-java-contracts.html"/>
        </biblioid>
      </bibliomixed>

      <bibliomixed xml:id="service.jakartaws-whiteboard.pattern.ref">
        <title>Whiteboard Pattern</title>

        <biblioid class="uri">
          <link xlink:href="https://docs.osgi.org/whitepaper/whiteboard-pattern/"/>
        </biblioid>
      </bibliomixed>

      <bibliomixed xml:id="service.jakartaws-iana.media.types">
        <title>IANA Media Type Registrations</title>

        <biblioid class="uri">
          <link xlink:href="https://www.iana.org/assignments/media-types/media-types.xhtml"/>
        </biblioid>
      </bibliomixed>

      <bibliomixed xml:id="service.jakartaws-iana.media.type.suffixes">
        <title>IANA Media Type Suffix Registrations</title>

        <biblioid class="uri">
          <link xlink:href="https://www.iana.org/assignments/media-type-structured-suffix/media-type-structured-suffix.xhtml"/>
        </biblioid>
      </bibliomixed>

    </bibliolist>
  </section>
</section>
</chapter>
